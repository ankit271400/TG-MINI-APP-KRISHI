import TelegramBot from 'node-telegram-bot-api';

export class KrishiAITelegramBot {
  private bot: TelegramBot | null = null;
  private isActive = false;

  async initializeBot(token: string): Promise<boolean> {
    try {
      this.bot = new TelegramBot(token, { polling: true });
      this.isActive = true;
      this.setupCommands();
      this.setupMessageHandlers();
      console.log('KrishiAI Telegram Bot initialized successfully');
      return true;
    } catch (error) {
      console.error('Failed to initialize Telegram bot:', error);
      return false;
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    this.bot.setMyCommands([
      { command: 'start', description: '🌾 Welcome to KrishiAI - Agricultural Intelligence' },
      { command: 'weather', description: '🌤️ Get live weather data for your city' },
      { command: 'crops', description: '🌱 Get crop recommendations based on weather' },
      { command: 'help', description: '❓ Get help and available commands' },
      { command: 'advisor', description: '🧑‍🌾 Get agricultural advice and tips' },
      { command: 'prices', description: '💰 Get current market prices for crops' },
      { command: 'alerts', description: '⚠️ Set up weather alerts for your location' }
    ]);
  }

  private setupMessageHandlers() {
    if (!this.bot) return;

    // Weather command
    this.bot.onText(/\/weather(?:\s+(.+))?/, (msg, match) => {
      const city = match?.[1] || 'Mumbai';
      this.handleWeatherCommand(msg, city);
    });

    // Crop recommendations
    this.bot.onText(/\/crops(?:\s+(.+))?/, (msg, match) => {
      const city = match?.[1] || 'Mumbai';
      this.handleCropsCommand(msg, city);
    });

    // Agricultural advisor
    this.bot.onText(/\/advisor(?:\s+(.+))?/, (msg, match) => {
      const query = match?.[1] || '';
      this.handleAdvisorCommand(msg, query);
    });

    // Market prices
    this.bot.onText(/\/prices(?:\s+(.+))?/, (msg, match) => {
      const crop = match?.[1] || '';
      this.handlePricesCommand(msg, crop);
    });

    // Photo analysis for crop scanning
    this.bot.on('photo', (msg) => {
      this.handlePhotoMessage(msg);
    });

    // Text message handling
    this.bot.on('message', (msg) => {
      if (!msg.text?.startsWith('/')) {
        this.handleTextMessage(msg);
      }
    });
  }

  private async handleWeatherCommand(msg: TelegramBot.Message, city: string) {
    if (!this.bot) return;

    try {
      await this.bot.sendMessage(msg.chat.id, `🔄 Getting live weather data for ${city}...`);
      
      const response = await fetch(`http://localhost:5000/api/weather/${encodeURIComponent(city)}`);
      const weather = await response.json();

      const weatherMessage = `
🌤️ *Weather Report for ${city}*

🌡️ *Temperature:* ${weather.temperature}°C
💧 *Humidity:* ${weather.humidity}%
🌧️ *Rainfall:* ${weather.rainfall}mm
☁️ *Condition:* ${weather.description}

*🌾 Farming Recommendation:*
${weather.recommendation}

*⏰ Best Time to Farm:*
${weather.bestTimeToFarm}

*🌱 Recommended Crops:*
${weather.cropSuggestions?.join(', ') || 'Based on current conditions'}

_Last updated: ${new Date().toLocaleString('en-IN')}_
      `;

      await this.bot.sendMessage(msg.chat.id, weatherMessage, { parse_mode: 'Markdown' });
    } catch (error) {
      await this.bot.sendMessage(msg.chat.id, `❌ Sorry, couldn't get weather data for ${city}. Please try another city name.`);
    }
  }

  private async handlePhotoMessage(msg: TelegramBot.Message) {
    if (!this.bot || !msg.photo) return;

    await this.bot.sendMessage(msg.chat.id, `📸 *Crop Health Analysis Starting...*

🔍 AI is analyzing your crop image
⚡ Detecting diseases and health issues
📊 Generating recommendations

Please wait while our AI processes your image...`);

    // Simulate AI analysis
    setTimeout(async () => {
      const analysisResult = `
🌾 *AI Crop Health Analysis Complete*

*📊 Analysis Results:*
✅ *Crop Type:* Wheat (confidence: 94%)
✅ *Health Status:* Healthy with minor concerns
⚠️ *Detected Issue:* Early stage leaf rust (15% affected area)

*💊 Treatment Recommendations:*
1. Apply fungicide: Propiconazole 25% EC
2. Dosage: 1ml per liter of water
3. Spray timing: Early morning or evening
4. Repeat after 15 days if needed

*🌱 Preventive Measures:*
• Improve field drainage
• Reduce crop density
• Apply balanced nutrition
• Monitor regularly

*📈 Expected Recovery:* 7-10 days with treatment
*💰 Treatment Cost:* ₹400-600 per acre

_Analysis powered by KrishiAI Agricultural Intelligence_
      `;

      if (this.bot) {
        await this.bot.sendMessage(msg.chat.id, analysisResult, { parse_mode: 'Markdown' });
      }
    }, 3000);
  }

  getStatus() {
    return {
      active: this.isActive,
      hasToken: this.bot !== null
    };
  }

  async stopBot() {
    if (this.bot) {
      await this.bot.stopPolling();
      this.bot = null;
      this.isActive = false;
    }
  }
}

export const krishiAIBot = new KrishiAITelegramBot();
